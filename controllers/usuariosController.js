const db=require("../db"),bcrypt=require("bcrypt"),jwt=require("jsonwebtoken"),{validationResult:validationResult}=require("express-validator");function validarRequest(r,o){const s=validationResult(r);return s.isEmpty()?null:o.status(400).json({errores:s.array()})}async function obtenerUsuarioPorId(r,o){try{const{id:s}=r.params,a=await db.query("SELECT id, usuario, nombre, cedula, email, rol\n         FROM usuarios\n        WHERE id = $1",[s]);return 0===a.rowCount?o.status(404).json({msg:"Usuario no encontrado"}):o.json(a.rows[0])}catch(r){return console.error("Error en obtenerUsuarioPorId:",r),o.status(500).json({msg:"Error interno del servidor"})}}const registrarUsuario=async(r,o)=>{const{usuario:s,cedula:a,email:e,password:n}=r.body;console.log(`üìù Intentando registrar: ${s}`);try{if((await db.query("SELECT 1 FROM usuarios WHERE usuario = $1",[s])).rowCount>0)return o.status(409).json({error:"El usuario ya existe"});const r=await bcrypt.hash(n,10);return await db.query("INSERT INTO usuarios \n         (usuario, nombre, cedula, email, password_hash, rol)\n       VALUES ($1, $2, $3, $4, $5, $6)",[s,"Por definir",a,e,r,"cotizador"]),o.status(201).json({mensaje:"Usuario registrado exitosamente"})}catch(r){return console.error("‚ùå Error en registrarUsuario:",{code:r.code,detail:r.detail,message:r.message}),"23505"===r.code?o.status(409).json({error:"Usuario, c√©dula o email duplicado"}):o.status(500).json({error:"Error interno del servidor"})}},loginUsuario=async(r,o)=>{const{usuario:s,password:a}=r.body;console.log(`üîç Intentando login: ${s}`);try{const r=await db.query("SELECT * FROM usuarios WHERE usuario = $1",[s]);if(0===r.rowCount)return o.status(404).json({error:"Usuario no encontrado"});const e=r.rows[0],n=await bcrypt.compare(a,e.password_hash);if(console.log(`üîê Contrase√±a v√°lida: ${n}`),!n)return o.status(401).json({error:"Contrase√±a incorrecta"});const t=jwt.sign({id:e.id,rol:e.rol},process.env.JWT_SECRET,{expiresIn:"2h"});return o.status(200).json({id:e.id,usuario:e.usuario,nombre:e.nombre,rol:e.rol,token:t})}catch(r){return console.error("‚ùå Error en loginUsuario:",r),o.status(500).json({error:"Error al iniciar sesi√≥n"})}},crearAdmin=async(r,o)=>{try{const r=process.env.ADMIN_USER,s=process.env.ADMIN_PASS,{rowCount:a}=await db.query("SELECT 1 FROM usuarios WHERE rol = $1",["administrador"]);if(a>0)return o.status(409).json({mensaje:"Administrador ya existe"});const e=await bcrypt.hash(s,10);return await db.query("INSERT INTO usuarios\n         (usuario, nombre, cedula, password_hash, rol)\n       VALUES ($1, $2, $3, $4, $5)",[r,"Administrador","0000000000",e,"administrador"]),o.status(201).json({mensaje:"Administrador creado"})}catch(r){return console.error("Error crearAdmin:",r),o.status(500).json({error:"Error interno al crear admin"})}},actualizarUsuario=async(r,o)=>{console.log("üéØ controlador actualizarUsuario:",r.method,r.originalUrl,"body=",r.body);const s=Number(r.params.id),a=r.user.id;let e;if("administrador"===r.user.rol)e=s;else{if(a!==s)return o.status(403).json({msg:"No tienes permisos para actualizar este usuario"});e=a}const{nombre:n,email:t,cedula:i}=r.body;try{const r=await db.query("\n      UPDATE usuarios\n      SET nombre = $1,\n          email  = $2,\n          cedula = $3\n      WHERE id = $4\n      RETURNING id, usuario, nombre, email, cedula, rol;\n    ",[n,t,i,e]);return 0===r.rowCount?o.status(404).json({msg:"Usuario no encontrado"}):o.status(200).json(r.rows[0])}catch(r){return console.error("‚ùå Error actualizando usuario:",r),o.status(500).json({msg:"Error interno",error:r.message})}};module.exports={registrarUsuario:registrarUsuario,loginUsuario:loginUsuario,crearAdmin:crearAdmin,obtenerUsuarioPorId:obtenerUsuarioPorId,actualizarUsuario:actualizarUsuario};